//%attributes = {"lang":"en","invisible":true,"shared":true,"executedOnServer":true} comment added and reserved by 4D.
// --[HEADERSTART]-------------------------------------
// User name (OS): Joshua Fletcher
// Date and time: 04/04/12, 12:34:05
// ----------------------------------------------------
// Description:
//   Startup code for CodeExport component.
//
//   This code is launched via the macro events, there
//   is no setup code needed in the Host database.
//
//   Important note: this code should only run once per
//   session.  Once it's started executing, it won't
//   run again.
//
//   Note: executes on server.
// --[HEADEREND]---------------------------------------
C_LONGINT($error_l;$dontcare_l)
C_TEXT($externalDataFolder_t;$externalDataFile_t;$sourceFolderName_t;$sourceFolderPath_t;$logFileName_t)

// Set up error handling module.
UTIL_ERR_Startup 

// Check to make sure the code can be executed.
If (CE_UTIL_OkToStart )

$externalDataFolder_t:="ce_data"
$externalDataFile_t:="CE_Data"
$sourceFolderName_t:="ce_source"
$logFileName_t:="ce_errors.txt"

// The root for source files.
$sourceFolderPath_t:=Get 4D folder(Database Folder ;*)+$sourceFolderName_t
If (Test path name($sourceFolderPath_t)#Is a folder )
CREATE FOLDER($sourceFolderPath_t)
End if 

// ===================================================================================
// Global variables, used throughout the component.

// Component name used for error dialogs (see UTIL_ERR_HandleError)
C_TEXT(<>CE_ComponentName_t)
<>CE_ComponentName_t:="CodeExport Component"

// Source Toolkit paths are all POSIX compliant (thus need to be converted to System).
// However they are also relative paths.  The "Convert path POSIX to system" command
// requires absolute paths.  I.e. I need the source root path to be POSIX for further
// usage.
// Furthmore Source Toolkit paths are encoded (so pass the *).
C_TEXT(<>CE_SourcerootPOSIX_t)
<>CE_SourcerootPOSIX_t:=Convert path system to POSIX($sourceFolderPath_t;*)

// Path to external database to store CE metadata.
C_TEXT(<>CE_DataFile_t)
$externalDataFolder_t:=Get 4D folder(Database Folder ;*)+$externalDataFolder_t
If (Test path name($externalDataFolder_t)#Is a folder )
CREATE FOLDER($externalDataFolder_t)
End if 
<>CE_DataFile_t:=$externalDataFolder_t+Folder separator +$externalDataFile_t

// Global flag to stop the background monitor process (and prevent it from relaunching too).
C_BOOLEAN(<>CE_StopMonitor_f)
<>CE_StopMonitor_f:=False

// Global error flag, if there's an error, code export is disabled.
C_BOOLEAN(<>CE_Error_f)
<>CE_Error_f:=False

// Constant for the external database, this is the name of the last stamp preference.
C_TEXT(<>CE_StampLabel_t)
<>CE_StampLabel_t:="Last Method Stamp"

// Log file for invalid method paths (see CE_EXT_LogSave)
C_TEXT(<>CE_EXT_LogFile_t)
<>CE_EXT_LogFile_t:=Get 4D folder(Logs Folder ;*)+"ce_errors.txt"

// ===================================================================================
// Set up the external database.
C_TEXT($statement_t)

If (Test path name($externalDataFolder_t)#Is a folder )
CREATE FOLDER($externalDataFolder_t)
End if 


If (Test path name(<>CE_DataFile_t+".4db")#Is a document )

// Create the database.
$statement_t:="CREATE DATABASE IF NOT EXISTS DATAFILE '"+<>CE_DataFile_t+"';"
UTIL_ERR_HandlerInstall 
Begin SQL
EXECUTE IMMEDIATE :$statement_t;
End SQL
$error_l:=UTIL_ERR_HandlerRemove 


// Connect to external database.
If ($error_l=0)
$error_l:=CE_EXT_Open 
End if 


// Create preferences table.
If ($error_l=0)
UTIL_ERR_HandlerInstall 
Begin SQL
CREATE TABLE IF NOT EXISTS CE_Prefs
(
   ID UUID NOT NULL UNIQUE AUTO_GENERATE,
   prefName VARCHAR NOT NULL UNIQUE,
   prefValue VARCHAR NOT NULL
);
End SQL
$error_l:=UTIL_ERR_HandlerRemove 
End if 


// Create logging table for invalid paths.
If ($error_l=0)
UTIL_ERR_HandlerInstall 
Begin SQL
CREATE TABLE IF NOT EXISTS CE_BadPathLog
(
   ID UUID NOT NULL UNIQUE AUTO_GENERATE,
   methodPath VARCHAR NOT NULL UNIQUE,
   pathType INT NOT NULL,
   tableName VARCHAR,
   objectName VARCHAR,
   formObjectName VARCHAR,
   tableNameInvalid BOOLEAN NOT NULL,
   objectNameInvalid BOOLEAN NOT NULL,
   formObjectNameInvalid BOOLEAN NOT NULL,
   userWarned BOOLEAN NOT NULL
);
End SQL
$error_l:=UTIL_ERR_HandlerRemove 
End if 


If ($error_l=0)
// Close external database.
$error_l:=CE_EXT_Close 
Else 
UTIL_ERR_ErrorMethod_t:=Current method name
// Still close the external database if another problem
// occurred but don't overwrite the error code.
$dontcare_l:=CE_EXT_Close 
End if 


// Set the initial stamp value, but don't overwrite if it already exists.
If ($error_l=0)
$error_l:=CE_EXT_PrefSet (<>CE_StampLabel_t;"0";False)
End if 

End if 


// ===================================================================================
// These items only run if in component mode.
If ($error_l=0)
If (UTIL_IsComponent )
// Nothing for now.
End if 
End if 


// ===================================================================================
// Set a flag so we know everything is set up.
If ($error_l=0)
C_BOOLEAN(<>CE_Enabled_f)
<>CE_Enabled_f:=True
End if 


// ===================================================================================
// Start background process to monitor code changes.
If ($error_l=0)
CE_MON_Start 
End if 


If ($error_l#0)
UTIL_ERR_HandleError ($error_l;<>CE_ComponentName_t;UTIL_ERR_ErrorMethod_t;"CE startup failed.")
End if 

End if 
