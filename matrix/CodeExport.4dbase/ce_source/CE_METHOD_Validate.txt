//%attributes = {"lang":"en","invisible":true} comment added and reserved by 4D.// --[HEADERSTART]-------------------------------------// User name (OS): Joshua Fletcher// Date and time: 04/18/12, 15:33:53// ----------------------------------------------------// Description://   Validate the parts that make up method paths.  In//   particular table names, form names, and method//   names must conform to 4D identifier rules.////   This is necessary because invalid characters will//   prevent the ability to create the file on disk for//   the method.  It's true the Source Toolkit will//   escape certain characters for you, but not invalid//   identifier characters.// --[HEADEREND]---------------------------------------C_TEXT($1;$methodPath_t)C_BOOLEAN($2;$logErrors_f)C_LONGINT($0;$error_l)C_TEXT($objectName_t;$formObjectName_t;$tableName_t)C_LONGINT($methodType_l;$logInsertError_l)C_POINTER($table_p)C_BOOLEAN($checkTable_f;$checkObjectName_f;$checkFormObjectName_f)C_BOOLEAN($tableNameInvalid_f;$ObjectNameInvalid_f;$FormObjectNameInvalid_f)$methodPath_t:=$1If (Count parameters>1)$logErrors_f:=$2Else $logErrors_f:=FalseEnd if $error_l:=0// Indicates path is valid.$checkFormObjectName_f:=False$checkObjectName_f:=False$checkTable_f:=False$tableNameInvalid_f:=False$ObjectNameInvalid_f:=False$FormObjectNameInvalid_f:=FalseUTIL_ERR_HandlerInstall METHOD RESOLVE PATH($methodPath_t;$methodType_l;$table_p;$objectName_t;$formObjectName_t;*)$error_l:=UTIL_ERR_HandlerRemove // Use the method type to determine what to check.If ($error_l=0)// Table names, form names, and method names must conform to 4D identifier rules.Case of : ($methodType_l=Path Project method )$checkObjectName_f:=True: ($methodType_l=Path Table form )$checkObjectName_f:=True$checkFormObjectName_f:=True$checkTable_f:=True: ($methodType_l=Path Project form )$checkObjectName_f:=True$checkFormObjectName_f:=True: ($methodType_l=Path Trigger )$checkTable_f:=True: ($methodType_l=Path Database method )// Do nothing, database methods can't be invalid.Else // Should never happen, there are no other method types in Source Toolkit.$error_l:=<>ERR_METH_BadType_lUTIL_ERR_ErrorMethod_t:=Current method nameEnd case End if // Check $formObjectName_t; could be a form method, or an object method.If ($error_l=0)If ($checkFormObjectName_f)If ($formObjectName_t="")// It's the form method, Source Toolkit doesn't resolve a name (returns empty string).// The file will be named {formMethod} but this name won't pass 4D's identifier rules so this is a special case.$FormObjectNameInvalid_f:=FalseElse $FormObjectNameInvalid_f:=Not(UTIL_IsIdentifier ($formObjectName_t))End if End if End if // Check the table name.If ($error_l=0)If ($checkTable_f)$tableName_t:=Table name($table_p)$tableNameInvalid_f:=Not(UTIL_IsIdentifier ($tableName_t))End if End if // Check the "object" name; could be a project method name or form name.If ($error_l=0)If ($checkObjectName_f)$ObjectNameInvalid_f:=Not(UTIL_IsIdentifier ($objectName_t))End if End if If ($ObjectNameInvalid_f | $FormObjectNameInvalid_f | $tableNameInvalid_f)$error_l:=<>ERR_METH_BadName_lUTIL_ERR_ErrorMethod_t:=Current method nameIf ($logErrors_f)// log the failure$logInsertError_l:=CE_EXT_LogInsert (\$methodPath_t;\$methodType_l;\$tableName_t;\$objectName_t;\$formObjectName_t;\$tableNameInvalid_f;\$ObjectNameInvalid_f;\$FormObjectNameInvalid_f)If ($logInsertError_l#0)$error_l:=$logInsertError_lEnd if End if End if $0:=$error_l